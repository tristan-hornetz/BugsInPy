#!/bin/bash
usage="
      -w work_dir
             The working directory to compile the project. Default will be the current directory.
      -c wrapper_class
             The file containing the desired instrumentation class, which must be named WrapClass. The class needs to define __enter__ and __exit__ functions.
      -f force
             Force the instrumentation, even if the project was already instrumented.
"

force="0"
work_dir=""
wrapper_class=""

case $1 in
 -[h?] | --help)
    cat <<-____HALP
        Usage: ${0##*/} [ --help ]
        $usage
____HALP
        exit 0;;
 -f) force="1";;
esac

###Read the flag of checkout
while getopts c:w: flag
do
    case "${flag}" in
        w) work_dir=${OPTARG};;
        c) wrapper_class=${OPTARG};;
    esac
done

framework_location="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

###Update the work directory
if [ "$work_dir" == "" ]; then
   work_dir=$(pwd)
fi

if [[ $work_dir == */ ]]; then
   temp_work_dir="$work_dir"
   work_dir=${temp_work_dir::-1}
fi

### Update the wrapper class location

if [ "$wrapper_class" == "" ]; then
   wrapper_class="$work_dir/TestWrapper/DefaultWrapperClass.py"
fi

###Check work directory
if [[ ! -e "$work_dir/bugsinpy_bug.info" ]]; then
   echo "This is not a checkout project folder"
   exit
elif [[ ! -e "$work_dir/bugsinpy_requirements.txt" ]]; then
   echo "This is not a checkout project folder"
   exit
elif [[ ! -e "$work_dir/bugsinpy_run_test.sh" ]]; then
   echo "This is not a checkout project folder"
   exit
fi

if [[ ! -e "$work_dir/bugsinpy_compile_flag" ]]; then
  if [[ $force != "1" ]]; then
   echo "You have not compiled this project"
   exit
  fi
fi
if [[ -e "$work_dir/bugsinpy_instrument_flag" ]]; then
  if [[ $force != "1" ]]; then
   echo "You have already instrumented this project"
   exit
  else
    echo "Forcing instrumentation..."
  fi
fi

### Create Symlink to Instrumentation sources
ln -s "${framework_location}/../py/TestWrapper" "${work_dir}/TestWrapper"
echo "Created Symlink ${work_dir}/TestWrapper -> ${framework_location}/../py/TestWrapper"

if [[ $force != "1" ]]; then
   dirname "${work_dir}" > "${work_dir}/TestWrapper/work_dir.info"
fi

wrapper_class="$(readlink -f "$(dirname "${wrapper_class}")")/$(basename "${wrapper_class}")"
ln -s "${wrapper_class}" "${work_dir}/WrapClass.py"
echo "Created Symlink ${work_dir}/WrapClass.py -> ${wrapper_class}"

pytest="0"
#read file run_test.sh
DONE=false
until $DONE ;do
read || DONE=true
if [ "$REPLY" != "" ]; then
   if [[ "$REPLY" == *"pytest"* || "$REPLY" == *"py.test"* ]]; then
       pytest="1"
   fi
fi
done < "$work_dir/bugsinpy_run_test.sh"

cd $work_dir

if [[ $pytest == "1" ]]; then
  echo "Pytest detected"
  ### Instrument conftest.py files
  while read -r line
  do
    line_arr=($line)
    if [[ $line == *"/conftest.py" ]]; then
      echo $'\nfrom TestWrapper.WrapperBase import pytest_runtest_call, pytest_sessionfinish\n' >> "${line_arr[1]}"
      echo "Instrumented ${line_arr[1]}"
    else
      dname=$(dirname "${line_arr[1]}")
      if [ ! -f "$dname/conftest.py" ]; then
        echo $'\nfrom TestWrapper.WrapperBase import pytest_runtest_call, pytest_sessionfinish\n' >> "$dname/conftest.py"
        echo "Created ${dname}/conftest.py"
      fi
      if [ ! -L "$dname/TestWrapper" ]; then
        ln -s "${framework_location}/../py/TestWrapper" "${dname}/TestWrapper"
        echo "Created Symlink ${dname}/TestWrapper -> ${framework_location}/../py/TestWrapper"
        ln -s "${wrapper_class}" "${dname}/WrapClass.py"
        echo "Created Symlink ${dname}/WrapClass.py -> ${wrapper_class}"
      fi
    fi
  done < <(du -a | grep ".*/tests_.*py$\|.*/test_.*py$\|.*_test.py$\|.*/conftest.py$")
else
  echo "Python Unittest detected"
  ### Instrument test files
  while read -r line
  do
    line_arr=($line)
    test_path=$(readlink -f "${line_arr[1]}")
    python ./TestWrapper/UnittestInstrumenter.py "${test_path}"
    echo "Instrumented ${test_path}"
  done < <(du -a | grep ".*\.py$")
fi

echo "1" > "$work_dir/bugsinpy_instrument_flag"



